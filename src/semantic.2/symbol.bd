% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

body "symbol.st" module Symbol
    /*
     * Module:	Semantic Pass Symbol Mechanism V1.00
     * Author: Mark Mendell, Stephen Perelgut
     * Date:	March 11, 1986
     */

    /*
     * This mechanism maintains all information about declared symbols
     * in the Symbol Table, and allows referencing of particular entries
     * via the Symbol Stack.  The kind of entries in the Symbol Stack
     * is the kind of the particular reference and is not necessarily
     * the same kind as in the corresponding Symbol Table entry.
     */

    /* Symbol Reference Descriptor */
    type SymbolReference :
	record
	    kind:	SymbolKinds
	    ident:	IdentifierIndex
	    symbol:	SymbolIndex
	end record

    /* Symbol Stack */
    var symbolStack: array 1..maxSymbolDepth of SymbolReference
    var symbolTop: 0..maxSymbolDepth := 0
    var maxSymbolTop: 0..maxSymbolDepth := 0


    /* Symbol Table Entry */
    type SymbolTableEntry :
	record
	    kind :	SymbolKinds
	    attributes:	SymbolAttributeSet
	    typex:	TypeIndex
	    value:	ValueIndex
	    unionBody:	int
	end record

    /* Symbol Table */
    var symbolTable:	array -(2 * (lastTypeKind + 1) +
			    (lastPredefinedId + 1) + maxDummySymbols)
			     .. maxSymbols of SymbolTableEntry
    var symbolTableTop:	0..maxSymbols := 0

    /* dummy symbols */
    var freeDummy : array -maxDummySymbols..-2 of boolean

    /* symboltable(-1) is the not found symbol */


    body procedure PushSymbol % (ident : IdentifierIndex, symbol: SymbolIndex)
	if symbolTop < maxSymbolDepth then
	    symbolTop += 1
	    if statistics and maxSymbolTop < symbolTop then
		maxSymbolTop := symbolTop
	    end if
	    if symbol > symbolTableTop then
		symbolTableTop := symbol
	    end if
	    bind var register s to symbolStack(symbolTop)
	    s.symbol := symbol
	    s.ident := ident
	    s.kind := symbolTable(symbol).kind
	else
	    Error (eSymbolStackOverflow)
	end if
    end PushSymbol


    body proc PushDummySymbol
	/* find a free dummy symbol */
	for i : -maxDummySymbols..-2
	    if freeDummy(i) then
		freeDummy(i) := false
		bind var register s to symbolTable(i)
		s.kind := sNotFound
		s.attributes := SymbolAttributeSet()
		s.typex := 0
		PushSymbol(0, i)
		return
	    end if
	end for
	Error(eNoFreeDummySymbols)
    end PushDummySymbol


    body proc PushCopyDummySymbol
	pre symbolTop > 0
	/* find a free dummy symbol */
	for i : -maxDummySymbols..-2
	    if freeDummy(i) then
		freeDummy(i) := false
		symbolTable(i) := symbolTable(symbolStack(symbolTop).symbol)
		PushSymbol(0, i)
		return
	    end if
	end for
	Error(eNoFreeDummySymbols)
    end PushCopyDummySymbol


    body procedure PopSymbol
	pre symbolTop > 0
	const i := symbolStack(symbolTop).symbol
	if i >= -maxDummySymbols and i < -1 then
	    assert not freeDummy(i)
	    freeDummy(i) := true
	end if
	symbolTop -= 1
    end PopSymbol


    body procedure EnterType % (typex: TypeIndex)
	pre symbolTop > 0 
	symbolTable(symbolStack(symbolTop).symbol).typex := typex
    end EnterType


    body procedure EnterUnionBodyCount % (count : int)
	pre symbolTop > 0
	symbolTable(symbolStack(symbolTop).symbol).unionBody := count
    end EnterUnionBodyCount


    body function BodyNumber % : int
	pre symbolTop > 0
	result symbolTable(symbolStack(symbolTop).symbol).unionBody
    end BodyNumber


    body procedure EnterValue % (value: ValueIndex
	pre symbolTop > 0
	symbolTable(symbolStack(symbolTop).symbol).value := value
    end EnterValue


    body function SymbolValue % : ValueIndex
	pre symbolTop > 0
	result symbolTable(symbolStack(symbolTop).symbol).value
    end SymbolValue



    body procedure EnterAttribute % (attribute: SymbolAttributes)
	pre symbolTop > 0
	symbolTable(symbolStack(symbolTop).symbol).attributes +=
	    SymbolAttributeSet(attribute)
    end EnterAttribute


    body procedure EnterKind % (kind: SymbolKinds)
	pre symbolTop > 0
	bind var register s to symbolStack(symbolTop)
	s.kind := kind
	symbolTable(s.symbol).kind := kind
    end EnterKind


    body procedure ChangeKind % (kind: SymbolKinds)
	pre symbolTop > 0
	symbolStack(symbolTop).kind := kind
    end ChangeKind


    body procedure ClearAttribute % (attribute: SymbolAttributes)
	pre symbolTop > 0
	symbolTable(symbolStack(symbolTop).symbol).attributes -=
	    SymbolAttributeSet(attribute)
    end ClearAttribute


    body procedure SwapSymbols
	pre symbolTop >= 2
	var s := symbolStack(symbolTop)

	symbolStack(symbolTop) := symbolStack(symbolTop-1)
	symbolStack(symbolTop-1) := s
    end SwapSymbols


    body function SymbolHasAttribute % (attribute: SymbolAttributes) : boolean
	pre symbolTop > 0
	result attribute in
	    symbolTable(symbolStack(symbolTop).symbol).attributes
    end SymbolHasAttribute


    body function SameSymbols % : boolean
	pre symbolTop >= 2
	result symbolStack(symbolTop).symbol = symbolStack(symbolTop-1).symbol
    end SameSymbols


    body function SymbolIdent % : IdentifierIndex
	pre symbolTop > 0
	result symbolStack(symbolTop).ident
    end SymbolIdent


    body function SymbolKind % : SymbolKinds
	pre symbolTop > 0
	result symbolStack(symbolTop).kind
    end SymbolKind


    body function ReturnSymbolAttributes % : SymbolAttributeSet
	pre symbolTop > 0
	result symbolTable(symbolStack(symbolTop).symbol).attributes
    end ReturnSymbolAttributes


    body function SymbolType % : TypeIndex
	pre symbolTop > 0
	result symbolTable(symbolStack(symbolTop).symbol).typex
    end SymbolType


    body function SymbolIndexx % : SymbolIndex
	pre symbolTop > 0
	result symbolStack(symbolTop).symbol
    end SymbolIndexx


    body function SymStackEmpty % : boolean
	result symbolTop = 0
    end SymStackEmpty


    body procedure SymStats
	put "symbol\n\tStack = ", maxSymbolTop, "/", maxSymbols
	put "\tTable = ", symbolTableTop, "/", maxSymbols
    end SymStats


    procedure PutSymbolKind (kind : SymbolKinds)
	if kind >= firstSymbolKind and kind <= lastSymbolKind then
	    put symbolNames(kind) : 20 ..
	else
	    put "?? " : 20 , kind ..
	end if
    end PutSymbolKind


    procedure PutAttributes(a : SymbolAttributeSet)
	var res := ""
	for i : firstSymbolAttribute .. lastSymbolAttribute
	    if i in a then
		res += attrchars(i+1)
	    else
		res += "-"
	    end if
	end for
	put res ..
    end PutAttributes


    body procedure DumpSymbols
	var ss := symbolTop
	var st := symbolTableTop

	var maxIndex := symbolTableTop

	if maxIndex < symbolTop then
	    maxIndex := symbolTop
	end if
	assert maxIndex >= 0

	put "\nSymbolStack\t\t\t\t\tSymbolTable"
	put "\tIdent\tSymbol\tKind                \t\tKind                \tType\tValue\tUnionBd\tAttributes"
	for decreasing i : maxIndex..1
	    assert ss <= i and st <= i
	    if ss = i then
		put i:7, "\t", symbolStack(ss).ident:7, "\t",
		    symbolStack(ss).symbol:7, "\t" ..
		PutSymbolKind(symbolStack(ss).kind)
		put "\t" ..
		ss := ss - 1
	    else
		put "\t\t\t\t\t\t" ..
	    end if
	    if st = i then
		put intstr(i,7), "\t" ..
		PutSymbolKind(symbolTable(i).kind)
		put "\t", symbolTable(i).typex, "\t", symbolTable(i).value,
		    "\t", symbolTable(i).unionBody, "\t" ..
		PutAttributes(symbolTable(i).attributes)
		st := st - 1
	    end if
	    put ""
	end for
	if allSymbols then
	    for decreasing i : 0  ..  -(2 * (lastTypeKind + 1) +
				    (lastPredefinedId + 1) + maxDummySymbols)
		put "\t\t\t\t\t\t", intstr(i,7), "\t" ..
		PutSymbolKind(symbolTable(i).kind)
		put "\t", symbolTable(i).typex, "\t", symbolTable(i).value,
		    "\t", symbolTable(i).unionBody, "\t" ..
		PutAttributes(symbolTable(i).attributes)
		put ""
	    end for
	end if
	put "\n", repeat("-", 79)
    end DumpSymbols



    /* Initialize null symbol entry */
    for i : -(2 * (lastTypeKind + 1) + (lastPredefinedId + 1) +
		maxDummySymbols) .. maxSymbols
	bind var register s to symbolTable(i)
	s.kind := sNotFound
	s.attributes := SymbolAttributeSet()
	s.typex := 0
	s.unionBody := 0
	s.value := 0
    end for

    /* set up the dummy symbols */
    for i : -maxDummySymbols..-2
	freeDummy(i) := true
    end for

end Symbol
