% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

body "error.st" procedure Error
    /* This procedure emits the error message for errCode.
     * Error messages are emitted by number and later resolved
     * to messages by the semantic error message resolver program.
     */
    assert errCode not = eNoError

	if errCode < firstSeriousErrorCode and not printWarnings then
		return
	end if

#if not PC then
    if not firstErrorFound then
	Ident.InitIdent
	firstErrorFound := true
    end if
#end if
    put "Line ", lineNumber, " of ", sourceFileName, ": " ..
#if not PC then

    if errCode >= firstWarningCode and
       errCode <  firstSeriousErrorCode then
	put "(Warning) " ..
    elsif errCode >= firstFatalErrorCode and
	   errCode <= lastErrorCode then
	put "(Implementation Restriction) " ..
    end if

    case errCode of
	include "semerr.msg"
	label :
	    put "Unknown semantic error - ", errCode
    end case

#else
    put "#", errCode, " ", errorIdent
#end if
    if errCode >= firstSeriousErrorCode then
	noErrors := noErrors + 1
    end if

    if errCode >= firstFatalErrorCode or noErrors = maxErrors then
	put "*** Processing aborted"
	sysexit(1)
    end if
end Error
