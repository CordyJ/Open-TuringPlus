% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

label oSymbolPush :
    assert compoundToken = aIdent
    Symbol.PushSymbol (compoundTokenValue.identIndex,
		       compoundTokenValue.symbolIndex)

label oSymbolPushPredefined:
    assert compoundToken = aPredefinedId
    Symbol.PushSymbol (compoundTokenValue.identIndex,
	Predefined.PreSymbolIndexx(compoundTokenValue.predefinedIdentIndex))

label oSymbolPushDummy:
    Symbol.PushDummySymbol

label oSymbolPushDummyCopy:
    Symbol.PushCopyDummySymbol

label oSymbolPushCopy :
    Symbol.PushSymbol(Symbol.SymbolIdent, Symbol.SymbolIndexx)

label oSymbolPushCountScope :
    Scope.LookupCountSymbol (Count.CountValue)
    Symbol.PushSymbol (0, Scope.ScopeSymbolIndex)

label oSymbolPushTypeSymbol :
    Symbol.PushSymbol (0, Types.TypeSymbol)

label oSymbolEnterType :
    Symbol.EnterType (Types.TypeIndexx)

label oSymbolEnterValue:
    var v : ValueIndex
    Value.ValueIndexx (v)
    Symbol.EnterValue (v)

label oSymbolEnterUnionBodyCount :
    Symbol.EnterUnionBodyCount(Count.UnionBodyCountValue)

label oSymbolBodySameAsValue:
    if Symbol.BodyNumber = Value.TopValue then
	resultValue := yes
    else
	resultValue := no
    end if

label oSymbolEnterAttribute :
    Symbol.EnterAttribute (parameterValue)

label oSymbolEnterKind :
    Symbol.EnterKind (parameterValue)

label oSymbolChangeKind :
    Symbol.ChangeKind (parameterValue)

label oSymbolClearAttribute :
    Symbol.ClearAttribute (parameterValue)

label oSymbolPop :
    Symbol.PopSymbol

label oSymbolPopAndChooseKind :
    resultValue := Symbol.SymbolKind
    Symbol.PopSymbol

label oSymbolChooseKind :
    resultValue := Symbol.SymbolKind

label oSymbolChooseAttribute :
    if Symbol.SymbolHasAttribute (parameterValue) then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oSymbolChooseSameSymbols :
    if Symbol.SameSymbols then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oSymbolSwapSymbols :
    Symbol.SwapSymbols

label oSymbolSaveHandlerSymbol:
    handlerSymbol := Symbol.SymbolIndexx

label oSymbolPushHandlerSymbol:
    Symbol.PushSymbol (0, handlerSymbol)
