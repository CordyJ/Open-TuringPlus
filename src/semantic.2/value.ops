% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

label oValuePushIntegerLit :
    assert compoundToken = aIntegerLit
    Value.PushValue (vInteger, positive, compoundTokenValue.val)

label oValuePushRealLit :
    assert compoundToken = aRealLit
    Value.PushString(vReal, compoundTokenValue.stringLen, 
			    compoundTokenValue.stringText)

label oValuePushStringLit :
    assert compoundToken = aStringLit
    Value.PushString(vString, compoundTokenValue.stringLen, 
			      compoundTokenValue.stringText)

label oValuePushCharLit :
    assert compoundToken = aCharLit
    Value.PushString(vChar, compoundTokenValue.stringLen, 
			    compoundTokenValue.stringText)

label oValuePush:
    Value.PushValueIndex (parameterValue)

label oValuePushCount :
    Value.PushValue(vInteger, positive, Count.CountValue)

label oValuePushStringLiteralLength :
    assert Value.ValueKind = vString or Value.ValueKind = vChar
    Value.PushValue (vInteger, positive, Value.TopValueLength)

label oValuePushStringLength :
    Value.PushValueIndex (Types.TypeStringBound)

label oValuePushSymbolValue :
    Value.PushValueIndex (Symbol.SymbolValue)

label oValuePushSymbolBodyNumber :
    Value.PushValue (vInteger, positive, Symbol.BodyNumber)

label oValuePushTypeRangeValues :
    Value.PushValueIndex (Types.TypeLowerBound)
    Value.PushValueIndex (Types.TypeUpperBound)

label oValuePushTypeSize :
    Value.PushValueIndex (Types.TypeSize)

label oValueConvertIntToReal :
    Value.ConvertIntToReal

label oValueConvertIntToNat :
    Value.ConvertIntToNat

label oValueConvertCharToString :
    Value.ConvertCharToString

label oValueReplaceNonManifest :
    Value.ReplaceValue (vRunTime, positive, 0)

label oValueAddValues :
    Value.AddValues

label oValueSubtractValues :
    Value.SubtractValues

label oValueMultiplyValues :
    Value.MultiplyValues

label oValueDivValues :
    Value.DivValues

label oValueModValues :
    Value.ModValues

label oValueNegate :
    Value.NegateValue

label oValueChr :
    Value.ChrValue

label oValueOrd :
    Value.OrdValue

label oValueGreaterValues :
    Value.GreaterValues

label oValueLessValues :
    Value.LessValues

label oValueEqualValues :
    Value.EqualValues

label oValueNot :
    Value.NotValue

label oValueLogicalAndValues:
    Value.LogicalAndValues

label oValueLogicalOrValues:
    Value.LogicalOrValues

label oValueLogicalXorValues:
    Value.LogicalXorValues

label oValueLogicalShiftRightValues:
    Value.LogicalShiftRightValues

label oValueLogicalShiftLeftValues:
    Value.LogicalShiftLeftValues

label oValueSetDifference:
    Value.SetDifference

label oValueSetIntersection:
    Value.SetIntersection

label oValueSetUnion:
    Value.SetUnion

label oValueSetXor:
    Value.SetXor

label oValueStringConcatenate :
    Value.StringConcatenate

label oValueTypeSetAll :
    Value.SetAll(Types.TypeLowerBound,Types.TypeUpperBound)

label oValueTypeSetCount :
    Value.BuildSet(Types.TypeLowerBound,Types.TypeUpperBound,Count.CountValue)

label oValuePop :
    Value.PopValue

label oValuePopAndChooseKind :
    resultValue := Value.ValueKind
    Value.PopValue

label oValueChooseLegalRangeValues :
    if Value.LeftValueLower then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseLegalSubstringValue :
    if Value.LegalSubstringValue then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseLegalSubstringValues :
    if Value.LegalSubstringValues then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseLegalSetRangeValues :
    if Value.LegalSetRange then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseInTypeRange :
    const v := Types.TypeLowerBound
    const v2 := Types.TypeUpperBound
    if Types.FlexRange then
	if Value.InFlexRange(v) then
	    resultValue := trueResult
	else
	    resultValue := falseResult
	end if
    elsif Value.InRange (v, v2) then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseKind :
    resultValue := Value.ValueKind

label oValueChooseLeftKind :
    resultValue := Value.LeftValueKind

label oValueChooseIllegalIntNatRange:
    if Value.IllegalIntNatRange then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseSameValues :
    if Value.SameValues then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseZero :
    var v : ValueIndex
    Value.ValueIndexx(v)
    if v = viZero then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueChooseNonNegative :
    if Value.NonNegative then
	resultValue := trueResult
    else
	resultValue := falseResult
    end if

label oValueSwapValues :
    Value.SwapValues

label oValueReplaceUnionBodyNumber :
    var v : ValueIndex
    Value.ValueIndexx(v)
    Value.PopValue
    Value.PushValue(vInteger, positive, Types.UnionBodyValue(v))

label oValueReplaceNil:
    Value.ReplaceValue (vNil, positive, Symbol.SymbolIndexx)
