% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

body "substring.st" module Substring

    /*
     *  File:    Turing Plus Semantic Pass 2 Substring Mechanism V1.00
     *	Author:  M.P. Mendell
     *  Date:	22 April 1986
     */

    /* Substring Stack */
    type SubstringType :
	record
	    left, right  : SubstringExpnKind
	end record

    var substringStack: array 1..maxSubstrings of SubstringType
    var substringTop: 0..maxSubstrings := 0


    body procedure PushNew
	if substringTop < maxSubstrings then
	    substringTop += 1
	    substringStack(substringTop).left  := substringNone
	    substringStack(substringTop).right := substringNone
	else
	    Error (eSubstringOverflow)
	end if
    end PushNew


    body procedure Pop
	pre substringTop > 0
	substringTop -= 1
    end Pop


    body procedure SetLeftKind % (k : SubstringExpnKind)
	pre substringTop > 0
	substringStack(substringTop).left := k
    end SetLeftKind


    body procedure SetRightKind % (k : SubstringExpnKind) =
	pre substringTop > 0
	substringStack(substringTop).right := k
    end SetRightKind


    body function ReturnLeftKind % : SubstringExpnKind
	pre substringTop > 0
	result substringStack(substringTop).left
    end ReturnLeftKind


    body function ReturnRightKind % : SubstringExpnKind
	pre substringTop > 0
	result substringStack(substringTop).right
    end ReturnRightKind

end Substring
