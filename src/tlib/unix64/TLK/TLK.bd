% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

% TLK
%  Turing Plus library concurrency support kernel
%
body "../../TL/TLK/TLK.st" module TLK
    include "TLK.var"

    % -- support routines
    child "TLKCS.st"		% context switch (asm)
    child "TLKSP.st"		% stack pointer (asm)

    % -- miscellaneous utility routines
    child "TLKUXRS.ch"		% utility external routine start (nop)
    child "TLKUXRE.ch"		% utility external routine end (nop)
    child "TLKUDMPP.ch"		% utility dump process (TLELF)
    child "TLKUDMPA.ch"		% utility dump all (UDMPP)
    child "TLKUEXIT.ch"		% utility exit (TLIFS,TLIDUMP,TLMUDUMP,UDMPA)

    % -- interrupts
    child "TLKDMINI.ch"		% device monitor initialize (nop)
    child "TLKDMENT.ch"		% device monitor enter (leaf)
    child "TLKDMEXT.ch"		% device monitor exit (leaf)
    child "TLKIPINI.ch"		% interrupt procedure initialize (IHAND)
    child "TLKIPENT.ch"		% interrupt procedure enter (nop)
    child "TLKIPEXT.ch"		% interrupt procedure exit (nop)

    % -- run queue insert
    child "TLKRQI.ch"		% run queue insert (leaf)

    % -- timeouts
    child "TLKTQI.ch"		% timeout queue insert (leaf)
    child "TLKTQD.ch"		% timeout queue dispatch (RQI)
    child "TLKTQU.ch"		% timeout queue update (TQD)
    child "TLKTQR.ch"		% timeout queue remove (leaf)
    child "TLKCINI.ch"		% clock initialize (IPINI,CTICK,TQU)

    % -- run queue & process descriptor access
    child "TLKPCS.ch"		% process context switch (CS)
    child "TLKRQD.ch"		% run queue dispatch (IPD,TQD,UEXIT,PCS,SMAL)
    child "TLKRGETP.ch"		% run queue get priority (leaf)
    child "TLKRSETP.ch"		% run queue set priority (leaf)
    child "TLKPGETP.ch"		% process get priority (RGETP)
    child "TLKPSETP.ch"		% process set priority (RSETP)
    child "TLKPGID.ch"		% process get id (leaf)
    child "TLKPSID.ch"		% process set id (leaf)

    % -- process creation
    child "TLKINI.ch"		% initialize main (leaf)
    child "TLKFINI.ch"		% finalize main (RQD)
    child "TLKPRUN.ch"		% startup routine for forked processes (RQD)
    child "TLKPDINI.ch"		% process descriptor initialize (leaf)
    child "TLKPFORK.ch"		% process fork (PDINI,RQI,RQD,PRUN,SMAL)
    child "TLKFRKED.ch"		% forked? (leaf)

    % -- processor allocation
    child "TLKRLOOP.ch"		% reschedule loop (RRSCH)
    child "TLKRROUT.ch"		% reschedule routine (RRSCH)

    % -- process synchronization
    child "TLKLKON.ch"		% lock on (nop)
    child "TLKLKOFF.ch"		% lock off (nop)
    child "TLKSSYNC.ch"		% synchronize (RQD,TQR,RQI,RRSCH)
    child "TLKSTIMO.ch"		% synchronize with timeout (TQI,RQD,RQI,RRSCH)
    child "TLKSWAKE.ch"		% synchronize wakeup (TQR,RQI,RRSCH)
    child "TLKPPAUS.ch"		% process pause (TQI,RQD)

    /*-----------------------------------------+
    |  allocate & initialize the main process  |
    +-----------------------------------------*/

    var initPD: TL_ProcessDescriptor  
    TLKPD := type(TL_PDpointer, addr(initPD))

    var name: string(12) := "Main Program"
    TLKPDINI(TLKPD)
    TL_Process(TLKPD).name := addr(name)
    TL_Process(TLKPD).stackLimit := TLKSP - MainStack 	% stack for main program
end TLK
