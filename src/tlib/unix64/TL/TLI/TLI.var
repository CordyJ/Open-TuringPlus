% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

grant (
    % Modules
	var TLB,
	var TLA,
	var TLK,

    % Procedures
	TLQUIT,
	TLIGT,
	TLIOS,
	TLIPS,
	TLIRER,
	TLISS,
	TLIWRR,

    % Collections
	var TL_Process,

    % Variables
	    TLIARC,
	    TLIARV,
	var TLIFCL,
	var TLIFFL,
	var TLIFGC,
	var TLIFOP,
	var TLIFPC,
	var TLIFPS,
	var TLIFRE,
	var TLIFSK,
	var TLIFTL,
	var TLIFUG,
	var TLIFWR,
	var TLIFZ,
	    TLIPXL,
	    TLIPXN,
	var TLIS,
	var TLIUXS,
	var TLIXSN,
	    TLKPD,

    % Constants
	maxargfiles,
	maxstream
    )

include "TLI.def"

const StreamName	: array 0 .. 2 of string(15)
	    := init ("Standard Input", "Standard Output", "Standard Error")

var TLIS	: array StreamNumberType of StreamEntryType

%
% External Stream number variables -- for interpreter
%
var TLIUXS	: boolean := false	% Use external stream numbers
var TLIXSN	: int			% External stream number

%
% initialize all streams to defaults
%
for sn : StreamNumberType
    TLIS(sn).mode		:= StreamModeSet()
    TLIS(sn).waitingForInput	:= nil(TL_Process)
end for

external var TLIstdin  : addressint
external var TLIstdout : addressint
external var TLIstderr : addressint

%
% Initialize StdInStream.
%
TLIS(StdInStream).fileName	:= addr(StreamName(0))
TLIS(StdInStream).info		:= TLIstdin
TLIS(StdInStream).lastOp	:= IoSeekMode
TLIS(StdInStream).atEof		:= false

%
% Initialize StdOutStream.
%
TLIS(StdOutStream).fileName	:= addr(StreamName(1))
TLIS(StdOutStream).info		:= TLIstdout
TLIS(StdOutStream).lastOp	:= IoSeekMode
TLIS(StdOutStream).atEof	:= true

%
% Initialize StdErrStream.
%
TLIS(StdErrStream).fileName	:= addr(StreamName(2))
TLIS(StdErrStream).info		:= TLIstderr
TLIS(StdErrStream).lastOp	:= IoSeekMode
TLIS(StdErrStream).atEof	:= true

%
% The following values are initialized in main.ch.
% TLIARC gives the number of arguments given when executing the program;
% in a UNIX environment, it would be equivalent to argc-1.
% TLIARV gives the values of the given arguments.  In a UNIX environment,
% it would be equivalent to argv.
%
var TLIARC	: int
var TLIARV	: addressint		% addr(ArgList)

%
% Initialize limbo streams.
%
for sn : 1 .. min(TLIARC,maxargfiles)
    TLIS(sn).fileName	:= ArgList@(TLIARV)(sn)
    TLIS(sn).mode	:= StreamModeSet(IoLimboMode)
end for

var TLIPXL : string(41) := "String generated for put item is too long"
var TLIPXN : string(43) := "Negative field width specified for put item"

%
% Declare I/O procedure variables.
%
var TLIFOP : function fopen (fileName, fileMode : string) : addressint
var TLIFFL : procedure fflush (stream : addressint)
var TLIFCL : procedure fclose (stream : addressint)
var TLIFGC : function fgetc (stream : addressint) : Cint
var TLIFUG : procedure ungetc (oopsChar : Cint, stream : addressint)
var TLIFPC : procedure fputc (outChar : char, stream : addressint)
var TLIFPS : procedure fputs (stringPtr : string, stream : addressint)
var TLIFSK : procedure fseek (stream : addressint, offset : int4,
		offsetType : Cint)
var TLIFTL : function ftell (stream : addressint) : int4
var TLIFRE : function fread (objAddr : addressint, byteSize, objSize : Cint,
		stream : addressint) : Cint
var TLIFWR : function fwrite (objAddr : addressint, byteSize, objSize : Cint,
		stream : addressint) : Cint
var TLIFZ : procedure freset (stream : addressint)
