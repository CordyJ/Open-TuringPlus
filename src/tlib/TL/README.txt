This directory contains the machine-independent implementations of the
Turing Plus library routines.

To be machine independent, all external names must adhere to the worst
restrictions imposed by any linker that Turing Plus is going to be
ported to.  In this case, the restrictions are assumed to be:
	- 7 or less character names
	- uppercase only

Furthermore, in order to avoid possible disaster by having a user
inadvertently re-define a library external symbol, all external symbols
are restricted to begin with TL (for Turing Library).

The library is structured as a tree, with TL.ch being the overall library
parent.  There are 7 distinct children modules:
	TLA - This module does all mathematical handling.
	TLB - This module does all buffer (memory) management.
	TLC - This module supports the Turing Plus to 'C' translator
	TLE - This module does all abort and exception handling.
	TLI - This module does all I/O processing.
	TLK - This module does all process and concurrency handling (kernel).
	TLM - This module does all monitor implementations.
	TLS - This module does all string manipulation.

Of course, there is a great deal of overlap in these modules;  for example,
strint originally calls a TLS routine (TLSVSI, for the curious), which then
ends up calling a TLM routine to do the actual work.

In each module, all routines are named with the first 3 letters of the name
the same as the module name.  In other words, all routines in the TLS module
are named TLS....  Yes, this means that the names all end up being a
nightmare.  Fortunately, a massive attempt was made to make the naming and
abbreviation scheme consistent, so once you've been exposed for long enough
to get the feel of what the naming is like, you should be able to re-create
most of the library names without having to remember them.  I hope.  Refer to
the individual sections for details on the routines therein.


For each system to be ported to, a directory should be present in "..".
For example, the Sun3 master directory is in ../sun3.  It is from this
directory that all make's should be done.  Also, that directory should
contain all the machine-dependent routines, including any re-writes of
supposedly machine-independent routines that are not satisfactory.  The
Makefile in the master directory should invoke a make in this directory,
optionally defining two symbols:
	TPC	- to define your own tpc command (defaults to "tpc")
	TFLAGS	- to define preprocessor and compile flags (defaults to -O)
Possible preprocessor flags include:
	CHECKED	- to compile in code to make a checked library
	IEEE	- to use IEEE floating point routines in TLM
	MALLOC	- to use the system "malloc" routine for memory allocation
	STDIO	- to assume a standard stdio library to do the eventual I/O

Unfortunately, not defining some of these symbols may result in an
excpUninimplementedFeature exception if various routines get called anyway.
Check out individual cases to be sure (STDIO is a particularly nasty one),
and re-define the affected routines inside the master directory, if necessary.


When compiling the library, it is necessary that line numbering be turned
off.  This is because the aborts generated by the library are of the form
"quit : #", rather than "quit < : #" ... thus the library routine must not
change the line number from that set by the users program.  The reason that
regular quit's are used is two-fold.  Firstly, the coder does not save and
restore the line number when calling predefined and auxiliary routines.
Secondly, some routines, notably the abort handling, can get called before
the process descriptor is properly set up.  Although this is detected inside
the routine itself, the presence of a "quit <" would force the compiler to
save the incoming line number, which results in chaos if the process
descriptor has not yet been set up.

It is generally a good idea to compile the library with both checking and
line numbering turned off, since the library routines are written to be
self-checking.
