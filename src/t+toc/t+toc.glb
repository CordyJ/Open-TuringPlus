% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

% Turing Plus to C Translator
%
% Global Type definitions (for easier access to the structures)

include "t+toc.lim"
include "error.def"

/*
 * define tNode to allow mutual recursion of structures
 */
    var tNode : unchecked collection of forward TreeType
    type *TreePointer : pointer to tNode


/*
 * ExpressionType is a node which can represent a leaf or an internal
 * operator node depending on its tag field OperatorNumber. If this tag
 * represents one of the leaves, string, real, integer, identifier,...
 * etc. then the Value holds its exact constant value, or if an Id, the
 * Reference field holds a reference to the variable which we do not need
 * to know about. If the node represents an internal node, i.e. an
 * operator of some kind, then the node has a pointer to the list of
 * operands. All nodes have a link field called Sibling which links
 * all operands of an operator node.  This allows effecient implementation
 * of multi way trees. The mark bit NodeIsMarked, is used to allow
 * construction of trees with an unknown number of kids. This is done by
 * pushing a marked op on the stack and then later, popping and linking
 * until the marked operator is found.  The operator then becomes the root
 * of the expression and is unmarked and pushed back. Prefix operators in
 * the stream use this.
 */

    const *MaxStringTokenSize := maxstr  /* from %limits included file */

    var  eNode             : unchecked collection of forward ExpressionType
    type *ExpressionPointer: pointer to eNode
    type *OpNumberType     : aIdent .. aEndOfFile : 2
    type *TokenString      : char(MaxStringTokenSize+1)
    var  strings	   : unchecked collection of TokenString
    type *StringPtr	   : pointer to strings


   type *ExpressionUnion : 
      union operatorNumber: OpNumberType of
	label aIntegerLit:
	    integerValue:	int4
	    integerKind:	int

	label aRealLit:
	    realValue:	StringPtr
	    realLen:	0..256

	label aStringLit:
	    stringValue:	StringPtr
	    stringLen:	0..256

	label aCharLit:
	    charValue:	StringPtr
	    charLen:	0..256

	label aTrue, aFalse, aAll, aBoolean,
	      aInt, aAddressint, aNat, aStar,
	      aString, aChar:       

	label aPredefinedId:
	    funcOrProcNumber: int

	label aEndSubstring:
	    substringKind:	int

	label aIdent: 
	    referenceValue:	int

	label aType:
	    expnType:		TreePointer

	label :
	    operand:	ExpressionPointer
#if CMS then
	dummy : char
#end if
	    nodeIsMarked:	boolean
      end union


    type *ExpressionType :
	record
	    u:		ExpressionUnion
#if CMS then
	dummy : char
#end if
	    sibling:	ExpressionPointer
	end record

/*
 * TreeType is a node with two pointers. One is to the list of operands,
 * and the other is to any Siblings. This allows any number of subtrees to
 * be attached to the node. The Operator Number is one of the token
 * numbers defined in the walker.ssl program. If a node is a leaf then
 * NodeKind is SimpleLeaf, in which case the label value is given by
 * OperatorNumber. If NodeKind is ExpressionLeaf the node is a leaf whose
 * label is an Expression stored in 'Leaf', otherwise NodeKind is
 * OperatorNode and the node has label OperatorNumber and children
 * 'Operand'. 'Sibling' links nodes be they leaf or internal. The Unknown
 * setting is used when popping and constructing a new subtree, it marks
 * the objective node of an EndSubtree call.
 */
    type *NodeKinds : enum (SimpleLeaf, ExpressionLeaf, OperatorNode, Unknown):1
    type *TreeType :
	record
	    operatorNumber:	int2
	    nodeKind:		NodeKinds
	    transformed:	boolean
	    leaf:		ExpressionPointer
#if CMS then
	dummy : char
#end if
	    operand:		TreePointer
#if CMS then
	dummy2 : char
#end if
	    sibling:		TreePointer
#if CMS then
	dummy3 : char
#end if
	    lineNumber:		nat2
	    fileNumber:		nat2
	end record


include "types.def"
include "arraystring.def"

/* string for un-named identifiers */
const *idNameString := "__x"

/*
 * Substring Kinds
 */

const *ssStar := 0
const *ssStarMinus := 1
const *ssExpn := 2
const *ssNone := 3

/*
 * Predefined tree structures
 */
const *pFirstTree := 0

const *pBoolean := 0
const *pChar := 1
const *pCharString1 := 2
const *pCharStringStorage := 3
const *pInt1 := 4
const *pInt2 := 5
const *pInt4 := 6
const *pNat1 := 7
const *pNat2 := 8
const *pNat4 := 9
const *pReal4 := 10
const *pReal8 := 11
const *pString := 12
const *pString1 := 13
const *pString2 := 14
const *pStringStorage := 15
const *pAddressint := 16
const *pMonitorVar := 17

const *pLastTree := pMonitorVar

const *pWithType := 0
const *pWithoutType := 1

var predtree : array pWithType .. pWithoutType,
		     pFirstTree .. pLastTree of TreePointer
