% Turing+ v6.2, Sept 2022
% Copyright 1986 University of Toronto, 2022 Queen's University at Kingston
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software
% and associated documentation files (the “Software”), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies
% or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
% AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

label oEmitInteger :
    assert compoundToken = aIntegerLit
    Emit.EmitByte(compoundTokenValue.integerKind)
    Emit.EmitLong(compoundTokenValue.val)

label oEmitString :
    assert compoundToken = aStringLit or compoundToken = aIdentText
    Emit.EmitString (compoundTokenValue.stringLen,
		     compoundTokenValue.stringText)

label oEmitChar :
    assert compoundToken = aCharLit
    Emit.EmitString (compoundTokenValue.stringLen,
		     compoundTokenValue.stringText)

label oEmitReal :
    assert compoundToken = aRealLit
    Emit.EmitString (compoundTokenValue.stringLen,
		     compoundTokenValue.stringText)

label oEmitSymbol :
    Emit.EmitInt (Symbol.SymbolIndexx)
    Emit.EmitInt (Symbol.SymbolIdent)

label oEmitPredefined :
    assert compoundToken = aPredefinedId
    Emit.EmitInt (compoundTokenValue.identIndex)
    Emit.EmitInt (compoundTokenValue.predefinedIdentIndex)

label oEmitAliasCheck :
    loop
	Actuals.ExtractAliases(firstAlias, secondAlias)
	exit when firstAlias = 0
	if firstAlias < 0 then
	    assert secondAlias < 0
	    Emit.EmitOutputToken(aNoAlias)
	    Emit.EmitOutputToken(aIntegerLit)
	    Emit.EmitByte(vInt)
	    Emit.EmitLong(-firstAlias)
	    Emit.EmitOutputToken(aIntegerLit)
	    Emit.EmitByte(vInt)
	    Emit.EmitLong(-secondAlias)
	else
	    assert secondAlias > 0
	    Emit.EmitOutputToken(aNoEnclosure)
	    Emit.EmitOutputToken(aIntegerLit)
	    Emit.EmitByte(vInt)
	    Emit.EmitLong(firstAlias)
	    Emit.EmitOutputToken(aIntegerLit)
	    Emit.EmitByte(vInt)
	    Emit.EmitLong(secondAlias)
	end if
    end loop

label oEmitLine :
    if emitNewSourceFile then
	Emit.EmitOutputToken(aNewFile)
	Emit.EmitString(length(nextSourceFileName), nextSourceFileName)
	emitNewSourceFile := false
    end if
    emitNewLineNumber := true

label oEmitBufferPush:
    Emit.EmitBufferPush

label oEmitBufferEmit:
    Emit.EmitBufferEmit

label oEmitBufferPop:
    Emit.EmitBufferPop

label oEmitBufferPushDirect:
    Emit.SetDirect

label oEmitBufferPopDirect:
    Emit.ClearDirect
